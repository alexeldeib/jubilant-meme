name: $(Date:yyyyMMdd)$(Rev:.r)_$(Build.SourceBranchName)_$(BuildID)
# trigger: none

pool:
  name: nodesigtest-pool

stages:
- stage: build_vhd
  dependsOn: []
  jobs:
  - job: matrix
    steps:
    - bash: |
        scenarios=$(echo '{"build-1-25-2-ubuntu-22-04-gen2":{"kube_version":"1.25.2","sku":"ubuntu-22.04-gen2"}}' | jq -r tojson | sed 's/\\//g')
        echo "##vso[task.setVariable variable=output;isOutput=true]"$scenarios
      name: matrix
  - job: build
    dependsOn:
    - matrix
    strategy:
      matrix: $[ dependencies.matrix.outputs['matrix.output'] ]
    timeoutInMinutes: 180
    steps:
    - bash: ./scripts/install-nix.sh
      displayName: install nix
    - bash: |-
        set -euxo pipefail
        echo "starting build"
        source /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
        nix develope -c cachix use alexeldeib

        az login --identity
        SUBSCRIPTION="$(az account show | jq -r .id)"
        GROUP="$(mktemp -u ace-XXXXXXX | tr '[:upper:]' '[:lower:]')"
        GALLERY="acegallery"
        export GALLERY
        export GROUP
        export SUBSCRIPTION
        echo "##vso[task.setVariable variable=groupname;isOutput=true]"$GROUP
        az group create -g "${GROUP}" -l "eastus" --tags "aleldeib=true"
        az sig create -g $GROUP -r $GALLERY
        az sig image-definition create \
          --resource-group ${GROUP} \
          --gallery-name ${GALLERY} \
          --gallery-image-definition ubuntu2204gen2 \
          --publisher microsoft-aks \
          --offer $GALLERY \
          --sku ubuntu2204gen2 \
          --os-type Linux \
          --hyper-v-generation V2 \
          --location eastus 
        outfile=$(mktemp --suffix=.json packer-out-XXXX)
        echo "kube_version $(kube_version)"
        export kube_version="$(kube_version)"
        nix develop -c bash ./scripts/package.sh
        nix develop -c bash -c "json-patch -p packer/market-src-patch.json -p packer/sig-dest-patch.json -p packer/ubuntu-22.04-gen2-patch.json < packer/base.json | jq | tee $outfile"
        sleep 10
        nix develop -c az group show -g "${GROUP}"
        nix develop -c packer build $outfile
      displayName: install dependencies
      name: build
    - bash: |-
        set -euxo pipefail
        az group delete -y --no-wait -g "$(build.groupname)"
      displayName: cleanup
      condition: always()
