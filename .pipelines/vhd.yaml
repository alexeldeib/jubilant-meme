name: $(Date:yyyyMMdd)$(Rev:.r)_$(Build.SourceBranchName)_$(BuildID)
# trigger: none

pool:
  name: nodesigtest-pool

stages:
- stage: build_vhd
  dependsOn: []
  jobs:
  - job: matrix
    steps:
    - bash: ./scripts/install-nix.sh
    - bash: |
        set -eux
        source /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
        nix flake show --json | jq  '.packages."x86_64-linux" | keys[]' | xargs -I {} nix profile install .#{}
        ./scripts/matrix.sh
        scenarios=$(./scripts/matrix.sh)
        echo "##vso[task.setVariable variable=output;isOutput=true]"$scenarios
      name: matrix
  - job: build
    dependsOn:
    - matrix
    strategy:
      matrix: $[ dependencies.matrix.outputs['matrix.output'] ]
    timeoutInMinutes: 180
    steps:
    - bash: ./scripts/install-nix.sh
      displayName: install nix
    - bash: |-
        set -uxo pipefail
        echo "starting build"
        source /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
        nix flake show --json | jq  '.packages."x86_64-linux"|keys[]'| xargs -I {} nix profile install .#{}

        az login --identity
        SUBSCRIPTION="$(az account show | jq -r .id)"
        GROUP="$(mktemp -u ace-XXXXXXX | tr '[:upper:]' '[:lower:]')"
        echo $GROUP > groupname.txt
        GALLERY="$(echo $GROUP | tr -d '-')"
        export GALLERY
        export GROUP
        export SUBSCRIPTION
        echo "sku = $(sku)"
        # export kube_version="$(kube_version)"
        export sku="$(sku)"
        generation="$(cue export matrix.cue | jq -r --arg sku $sku '.skus[$sku].generation')"
        echo "generation = ${generation}"
        echo "##vso[task.setVariable variable=groupname;isOutput=true]"$GROUP
        az group create -g "${GROUP}" -l "eastus" --tags "aleldeib=true"
        az sig create -g $GROUP -r $GALLERY
        az sig image-definition create \
          --resource-group ${GROUP} \
          --gallery-name $GALLERY \
          --gallery-image-definition $(echo $(sku) | tr -d '-') \
          --publisher microsoft-aks \
          --offer $GALLERY \
          --sku $(echo $(sku) | tr -d '-') \
          --os-type Linux \
          --hyper-v-generation ${generation} \
          --location eastus 
        outfile=$(mktemp --suffix=.json packer-out-XXXX)
        # echo "kube_version $(kube_version)"
        patches=""
        patchFiles="$(cue export matrix.cue | jq -r --arg sku $sku '.skus[$sku].patches[]')"
        for file in $patchFiles; do
          patches="$patches -p $file"
        done

        ./scripts/package.sh
        json-patch $patches < packer/base.json | jq | tee $outfile
        packer build -var-file=packer/$sku.json $outfile
        ssh-keygen -b 4096 -t rsa -f /tmp/sshkey -q -N ""
        az vm create -g ${GROUP} -n ${GROUP}-${sku} --public-ip-address "" --ssh-key-values /tmp/sshkey.pub --image /subscriptions/$SUBSCRIPTION/resourceGroups/$GROUP/providers/Microsoft.Compute/galleries/$GALLERY/images/$(echo $(sku) | tr -d '-')/versions/0.0.1 --vnet-name nodesig-pool-vnet --subnet packer
        az vm show -g ${GROUP} -n ${GROUP}-${sku} -d
        PRIVATE_IP=$(az vm show -g ${GROUP} -n ${GROUP}-${sku} -d --query privateIps -d --out tsv)
        until ssh azureuser@${PRIVATE_IP}
        do
          sleep 2
        done
        ssh-keyscan -H $PRIVATE_IP >> ~/.ssh/known_hosts
        ssh azureuser@${PRIVATE_IP} sudo bash -c 'journalctl --no-tail -u imds-ready > /tmp/imds-ready-logs; systemctl status imds-ready >> /tmp/imds-ready'
        scp azureuser@${PRIVATE_IP}:/tmp/imds-ready-logs /tmp/imds-ready-logs
        cat /tmp/imds-ready-logs

      displayName: install dependencies
      name: build
    - bash: |-
        set -euxo pipefail
        az group delete -y --no-wait -g $(cat groupname.txt)
      displayName: cleanup
      condition: always()
